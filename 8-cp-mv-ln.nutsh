lesson_name("Dateien kopieren, verschieben und verlinken - cp, mv, ln")
make_home

"Mit `cp` können Sie Dateien kopieren, wobei das Original erhalten bleibt: Das erste Argument ist, *was* Sie kopieren möchten, das zweite *wohin*."

"Kopieren Sie zum Beispiel mal den Hamburger, der in der Küche liegt, in eine zweite Datei namens `hamburger2`."

run(`touch "$ROOT/küche/hamburger1"`)

prompt {
    if file("$ROOT/küche/hamburger2") {
        if file("$ROOT/küche/hamburger1") {
            expect("cp küche/hamburger{1,2}")
            break
        } else {
            "Huch, der Originalburger ist verschwunden! Bitte kopieren Sie den zweiten nach `hamburger1`, damit Sie zwei haben."
        }
    }
}

"Wenn das Ziel kein Dateiname ist, sondern ein existierendes Verzeichnis, dann wird die zu kopierende Datei *in den Ordner hinein* kopiert."

"Sie können auch immer mehrere zu kopierende Dateien angeben - das letzte Argument *muss* dann ein Verzeichnis sein, in das die Dateien kopiert werden."

"Nun lassen Sie uns ein paar Dateien *verschieben* - der Befehl heißt `mv` (\"move\") und funktioniert ganz genauso wie `cp`, nur dass die Ausgangsdateien verschwinden."

"Bringen Sie die beiden Burger ins Esszimmer!"

prompt {
    if file("$ROOT/küche/esszimmer/hamburger1") && file("$ROOT/küche/esszimmer/hamburger2") {
        if file("$ROOT/küche/hamburger1") || file("$ROOT/küche/hamburger2") {
            "OK, aber Sie haben kopiert, anstatt verschoben. Verschieben geht mit `mv`. Löschen Sie noch die Burger in der Küche."
        } else {
            expect(`cd küche; mv hamburger* esszimmer`)
            break
        }
    }
}

"Was im ersten Moment überrascht: Mit `mv` kann man auch Dateien umbenennen. Man \"verschiebt\" dabei eine Datei in eine andere Datei im selben Verzeichnis - das Resultat ist eine Umbenennung der Datei."

"Im Flur liegt zum Beispiel ein 10-Euro-Schein. Machen Sie einen 100-Euro-Schein daraus ;-)"

run(`touch "$ROOT/10euroschein"`)

prompt {
    if file("$ROOT/100euroschein") {
        if ! file("$ROOT/10euroschein") {
            expect(`cd "$ROOT"; mv 10euroschein 100euroschein`)
            break
        } else {
            "Umbenennen können Sie die Datei mit `mv`. Jetzt haben Sie insgesamt 110 Euro. Löschen Sie noch den 10-Euro-Schein!"
        }
    }
}

"Und schließlich kann man Verweise (*Links*) auf Dateien erstellen, dazu benutzt man `ln` (\"link\")."

"`ln [Zieldatei] [Name des Links]` erstellt man einen \"harten\" Link auf eine Datei, mit der Option `-s` erstellt man einen \"symbolischen\" Link."

"Erstellen sie zum Beispiel mal einen harten Link auf den Geldschein namens `harterschein` und einen symbolischen namens `symbolischerschein`."

prompt {
    if test(`-h "$ROOT/symbolischerschein"`) && file("$ROOT/symbolischerschein") {
        expect("ln 100euroschein harterschein; ln -s 100euroschein symbolischerschein")
        break
    }
}

"Nun schreiben Sie mal in die Originaldatei etwas herein und überprüfen Sie dann die Inhalte der beiden Links (Pro-Tipp: Dateien kann man mit `cat` schnell und einfach auslesen). Der Unterschied zwischen den beiden Linktypen wird deutlich, wenn Sie `ls -l` ausführen."

prompt {
    if command =~ "ls -l" {
        expect("ls -l")
        break
    }
}

"Die Option `-l` (\"long\") zeigt mehr Details zu den Dateien und Ordnern an (nämlich Zugriffsrechte, Anzahl der harten Links auf die selbe Datei, Besitzer, besitzende Gruppe, Dateigröße, Zeitpunkt der letzten Änderung)"

"Die Zahl 2 in der zweiten Spalte der harten Links signalisiert, dass diese Datei nun zwei Namen hat. Der symbolische Link hingegen ist eine eigene spezielle Datei und verweist nur auf die Ursprungsdatei. Ehrlich gesagt - diese Links braucht man sehr selten. Aber wenn Sie mal auf welche stoßen, wissen Sie, worum es sich dabei handelt."

"Alles verstanden? Räumen Sie noch auf, wenn Sie mögen (löschen Sie das Geld im Flur und die Burger im Esszimmer), und machen Sie noch weitere Beispiele mit `cp` und `mv`. Sie können zum Beispiel mithilfe der Manpages mal herausfinden, wie man einen ganzen Ordner kopiert."

"Mit `echo fertig` schließen Sie dann die Lektion ab."

prompt {
    if ready {
        expect("echo fertig")
        break
    }
}
