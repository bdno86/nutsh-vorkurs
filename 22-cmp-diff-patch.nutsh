lesson_name("Dateien vergleichen - cmp, diff, patch")
make_home
run(`rm "$ROOT"/wohnzimmer/löwe*`)

makeloewe

"Stellen Sie sich vor, Sie haben in einem großen Programm einige Fehler korrigiert, und möchten diese Änderungen nun mit einem Kommilitonen teilen."

"Sie könnten ihm jetzt das ganze, korrigierte Programm geben, aber es gibt Möglichkeiten, tatsächlich nur die *Änderungen* auszutauschen, und diese in die fehlerhafte Version zu übernehmen."

"Im Wohnzimmer finden Sie die Datei `löwe`. Machen Sie zunächst eine Kopie davon, und überprüfen Sie mit dem Befehl `cmp` (\"compare\"), ob die beiden Dateien gleich sind."

prompt {
    if command =~ `cmp\s+.*` && success {
        expect("cd wohnzimmer; cp löwe löwe_bak; cmp löwe löwe_bak")
        break
    }
}

"Wenn `cmp` nichts ausgibt, sind die Dateien genau gleich. Das ist überhaupt ein typisches Prinzip: Bei fehlender Ausgabe ist \"alles in Ordnung\"."

"Nun nehmen Sie einige Änderungen an der Originaldatei vor. Führen Sie dann erneut `cmp` aus."

prompt {
    if command =~ `cmp\s+` && exit_code == "1" {
        expect("sed -i 's/Löwe/Möwe/g' löwe; cmp löwe löwe_bak")
        break
    }
}

"Nun wird die erste unterschiedliche Stelle ausgegeben."

"Um Unterschiede zwischen Dateien anzusehen, ist `vimdiff` extrem praktisch. Es bekommt ebenfalls zwei Argumente, öffnet dann beide Dateien nebeneinander und färbt die Unterschiede ein. In diesem Modus kann die Dateien sogar weitereditieren: Bauen Sie weitere Unterschiede ein."

"Zur Erinnerung: *:x*, gefolgt von Enter, speichert und schließt die aktuelle Datei."

"*Strg+w* (wie \"window\"), gefolgt von einer Richtungstaste, bewegt den Cursor zwischen den beiden Fenstern hin- und her."

prompt {
    if command =~ `vimdiff\s+` && success {
        expect("echo vimdiff löwe löwe_bak")
        break
    }
}

"OK. `fertig` für den nächsten Schritt?"

prompt {
    if ready {
        expect("echo fertig")
        break
    }
}

"Der Befehl `diff` (\"difference\") gibt die Unterschiede zwischen zwei Dateien kompakt aus. Probieren Sie das mal! Führen Sie die `unveränderte Datei als erste` an, da es uns hier um die Änderungen hin zur veränderten Version geht. `Die Reihenfolge ist wichtig!`"

prompt {
    if command =~ `diff\s+\S+\s+löwe` && exit_code == "1" {
        expect("diff löwe_bak löwe")
        break
    }
}

"Die Ausgabe besteht aus einem oder mehreren Blöcken folgender Art:"

"Erst kommt eine Zeile nach dem Schema [Zeilen][Aktion][Zeilen], die beschreibt, was mit den Zeilen der ersten Datei hinsichtlich einiger Zeilen der zweiten Datei getan wurde.* c*hange beschreibt eine Ersetzung,* d*elete eine Löschung und* a*ppend ein Anhängen."

"Anschließend folgen Zeilen, die (bei einem* >*) in die zweite Datei eingefügt oder (bei einem* <*) herausgenommen wurden."

"Wesentlich verbreiteter ist das sogenannte *unified*-Diff-Format, dass Sie mit der Option *-u* ausgeben lassen."

prompt {
    if ( command =~ `diff\s+-u\s+\S+\s+löwe\s*$` || command =~ `diff\s+\S+\s+löwe\s+-u` ) && exit_code == "1" {
        expect("diff -u löwe_bak löwe")
        expect("diff löwe_bak löwe -u")
        break
    }
}

"Bei diesem Format werden hinzugekommene Zeilen mit einem* +* gekennzeichnet, weggefallene mit einem* -*."

"Leiten Sie die Ausgabe dieses Befehls nun in eine Datei namens `löwe.patch` um (\"patch\" von \"Flicken\")."

prompt {
    if file(`"$ROOT/wohnzimmer/löwe.patch"`) {
        expect("diff -u löwe_bak löwe > löwe.patch")
        break
    }
}

"Wenn Sie möchten, können Sie nun Ihre Patch-Datei mit einem anderen Kursteilnehmer austauschen. Das geht am einfachsten per Mail, zum Beispiel mit Ihrer neuen TU-Mailaddresse: https://groupware.tu-braunschweig.de/"

"Speichern Sie die fremde Patch-Datei als `löwe2.patch` in diesem Ordner. Das Verzeichnis `.nutsh`, in dem sich Ihr Wohnzimmer befindet, ist ein verstecktes Verzeichnis, da es mit einem Punkt beginnt. Es kann daher sein, dass Sie in Ihrem \"Datei speichern\"-Dialog per Rechtsklick oder *Strg-H* die Anzeige versteckter Dateien aktivieren müssen."

"Alternativ können Sie auch einfach mit Ihrer eigenen Patch-Datei weitermachen, indem Sie diese nach `löwe2.patch` verschieben."

"`fertig`?"

prompt {
    if ready {
        if file("$ROOT/wohnzimmer/löwe2.patch") {
            expect("cp löwe.patch löwe2.patch; echo fertig")
            break
        } else {
            expect("echo fertig")
            "Hier ist noch keine Datei namens `löwe2.patch`."
        }
    }
}

"Kopieren Sie außerdem Ihre Kopie der ursprünglichen, unveränderten Datei über die veränderte `löwe`-Datei."

prompt {
    if run(`wc -c < "$ROOT"/wohnzimmer/löwe`) == "4532" {
        expect("cp löwe_bak löwe")
        break
    }
    if command =~ "echo\s+neu" {
        makeloewe
    }
}

"Nun haben wir wieder - wie zu Beginn - zwei unveränderte Dateien. Und einen Patch, den wir nun mit `patch < [Patchdatei]` anwenden. (Die nach links gerichtete spitze Klammer gibt dem Befehl eine Datei als Eingabe.)"

"Mit `vimdiff` können Sie dann die Unterschiede zur Originaldatei betrachten."

prompt {
    if command =~ `patch.*löwe2?.patch` && success {
        expect("patch < löwe2.patch")
        break
    }
}

"Mit `echo fertig` schließen Sie auch diese Lektion ab."

prompt {
    if ready {
        expect("echo fertig")
        break
    }
}
